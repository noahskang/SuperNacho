{"version":3,"sources":["webpack:///webpack/bootstrap 49c369e06dbdfc647786","webpack:///./lib/entities/entity.js","webpack:///./lib/entities/sprite.js","webpack:///./lib/game.js","webpack:///./lib/util/input.js","webpack:///./lib/util/render.js","webpack:///./lib/util/movement.js","webpack:///./lib/util/physics.js","webpack:///./lib/util/animation.js","webpack:///./lib/entities/entities.js","webpack:///./lib/entities/chip.js","webpack:///./lib/entities/nacho.js","webpack:///./lib/entities/walls.js","webpack:///./lib/entities/background.js","webpack:///./lib/entities/score.js","webpack:///./lib/map/map_creator.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AClHA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,KAAK;;AAEL,YAAY;AACZ;AACA;AACA;;AAEA;;;;;;;;AClEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACtCA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACVA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;AC1EA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;AACA;;AAEA;;;;;;;;;;AC5CA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;AC7CA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;ACzGA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;;;;;;;;ACRA;;AAEA;AACA;AAAA;AAAA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"./assets/javascripts/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 49c369e06dbdfc647786","export default class Entity{\n  constructor(type, sprite, x, y, w, h){\n    this.type = type;\n    this.sprite = sprite;\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/entities/entity.js\n// module id = 0\n// module chunks = 0","export default class Sprite{\n  constructor(img, srcX, srcY, srcW, srcH){\n    this.img = img;\n    this.srcX = srcX;\n    this.srcY = srcY;\n    this.srcW = srcW;\n    this.srcH = srcH;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/entities/sprite.js\n// module id = 1\n// module chunks = 0","import Input  from './util/input';\nimport Render from './util/render';\nimport Movement  from './util/movement';\nimport Physics  from './util/physics';\nimport Animation from './util/animation';\n\nimport Entities from './entities/entities';\n\nimport MapCreator from './map/map_creator';\nimport * as Levels from './map/levels';\n\n\nclass Game {\n  // init gets called once at very beginning of game.\n  init(){\n    let bgCanvas = document.getElementById(\"bg-canvas\");\n    let fgCanvas = document.getElementById(\"fg-canvas\");\n\n    let canvas = {\n      bgCanvas: bgCanvas,\n      fgCanvas: fgCanvas,\n      // context is what we actually draw to\n      // canvas is what we draw on..\n      bgCtx: bgCanvas.getContext(\"2d\"),\n      fgCtx: fgCanvas.getContext(\"2d\")\n    };\n\n    const viewport = {\n      width: 760,\n      height: 600,\n      vX: 0,\n      vY: 0,\n    };\n\n    let audio = new Audio();\n    let backgroundMusic = [\n      \"audio/Manteca.m4a\",\n      \"audio/Desafinado.m4a\"\n    ];\n\n    let spriteSheet = new Image();\n    spriteSheet.src = \"img/sprite_sheet3.png\";\n\n    let tileSet = new Image();\n    tileSet.src = \"img/tileset.svg\";\n\n\n    document.getElementById('mute-sound').addEventListener('click', (e) => {\n      if(audio.muted){\n        audio.muted = false;\n      } else {\n        audio.muted = true;\n      }\n    });\n\n    // add a listener to wait until spritesheet is loaded.\n    spriteSheet.addEventListener(\"load\", ()=>{\n      // once it's loaded, then we can run the spritesheet.\n\n      let data = {\n        animationFrame: 0,\n        mapCreator: new MapCreator(Levels.one, tileSet, spriteSheet),\n        spriteSheet,\n        entities: {},\n        tileSet,\n        canvas,\n        viewport\n      };\n\n      let i = 0;\n      audio.addEventListener('ended', function () {\n        // when one song ends, play the next song in the playlist or loop back to the beginning.\n          i = i++ < backgroundMusic.length ? i : 0;\n          audio.src = backgroundMusic[i];\n          audio.play();\n      }, true);\n\n      audio.volume = i===0 ? 0.3 : 0.5;\n      audio.loop = false;\n      audio.src = backgroundMusic[0];\n      audio.play();\n      //\n      Input.init(data);\n      Entities.init(data);\n      Render.init(data);\n      this.run(data);\n    });\n  }\n\n  run (data){\n    const loop = () => {\n      // TODO: write game.updateview (to sidesscroll the viewport)\n      // get input from user\n      Input.update(data);\n      // animate character\n      this.update(data);\n      Render.update(data);\n      // every time the loop runs, add a tick to the animation frame.\n      data.animationFrame++;\n\n      window.requestAnimationFrame(loop);\n    };\n    loop();\n  }\n\n  update(data){\n    Animation.update(data);\n    Movement.update(data);\n    Physics.update(data);\n  }\n  // write an update view method to sidescroll the viewport\n}\n\nlet game = new Game();\ngame.init();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 2\n// module chunks = 0","const Input = {\n  init(data){\n    var self = this;\n\n    $(window).on(\"keydown\", function (event) {\n      self.helpers.down[event.keyCode] = true;\n    });\n\n    $(window).on(\"keyup\", function () {\n      delete self.helpers.down[event.keyCode];\n      delete self.helpers.pressed[event.keyCode];\n    });\n  },\n\n  update(data) {\n    var nacho = data.entities.nacho;\n\n    //Left Arrow\n    if (Input.helpers.isDown(37)) {\n      if (nacho.velY === 0) {\n        nacho.currentState = nacho.states.walking;\n      } else {\n        nacho.x -= nacho.velX;\n      }\n\n      nacho.direction = \"left\";\n    }\n\n    //Right Arrow\n    if (Input.helpers.isDown(39)) {\n      if (nacho.velY === 0) {\n        nacho.currentState = nacho.states.walking;\n      } else {\n        nacho.x += nacho.velX;\n      }\n\n      nacho.direction = \"right\";\n    }\n\n    //Up Arrow\n    if (Input.helpers.isDown(38)) {\n      nacho.currentState = nacho.states.jumping;\n    }\n  },\n\n  helpers: {\n    isDown(code) {\n      return Input.helpers.down[code];\n    },\n\n    isPressed(code) {\n      // these helpers are basic methods that tell us what key is pressed.\n      if (Input.helpers.pressed[code]) {\n        return false;\n      } else if (Input.helpers.down[code]) {\n        return (Input.helpers.pressed[code] = true);\n      }\n\n      return false;\n    },\n\n    down: {},\n    pressed: {}\n  }\n};\n\nexport default Input;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/util/input.js\n// module id = 3\n// module chunks = 0","const Render = {\n  init: data =>{\n    Render.helpers.drawEntity(data.entities.background, data.canvas.bgCtx);\n  },\n\n  // we draw chips on update method because we need to re render any time our character runs through a chip. (dynamic update necessary)\n  update: data=>{\n    // we clear the WHOLE screen every time.( we could just do part)\n    data.canvas.fgCtx.clearRect(0, 0, data.canvas.fgCanvas.width, data.canvas.fgCanvas.height);\n    // Render.helpers.drawText(data.entities.score, data.canvas.fgCtx);\n\n    // make sure the second argument is WHERE i want to draw him\n    Render.helpers.drawEntity(data.entities.nacho, data.canvas.fgCtx);\n\n    data.entities.chipsArray.forEach((chip)=>{\n      Render.helpers.drawEntity(chip, data.canvas.fgCtx);\n    });\n  },\n\n  helpers: {\n    // now when we call image, we can just call drawEntity, and the image will be drawn.\n    drawEntity: (entity, ctx)=>{\n      // we set the sprite, and the source x,\n      ctx.drawImage(entity.sprite.img,\n                entity.sprite.srcX, entity.sprite.srcY,\n                entity.sprite.srcW, entity.sprite.srcH,\n                entity.x, entity.y,\n                entity.w, entity.h);\n    },\n\n    drawText: (text, ctx)=>{\n      ctx.font = text.size + \" \" + text.font;\n      ctx.fillStyle = text.color;\n      ctx.fillText(\"Chips:\" + \" \" + text.value, text.x, text.y);\n    }\n  }\n};\n\nexport default Render;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/util/render.js\n// module id = 4\n// module chunks = 0","const Movement = {\n  update: data => {\n    nacho(data);\n  },\n};\n\nconst nacho = data => {\n  data.entities.nacho.currentState.movement(data);\n};\n\nexport default Movement;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/util/movement.js\n// module id = 5\n// module chunks = 0","const Physics = {\n  update: function(data){\n    Physics.helpers.gravity(data.entities.nacho);\n    Physics.collisionDetection(data);\n  },\n\n  collisionDetection: function (data) {\n    let nacho = data.entities.nacho;\n\n    let entityCollisionCheck = function (entity) {\n      // check to see if nacho image intersects with the entity image.\n      if (nacho.x < entity.x + entity.w &&\n        nacho.x + nacho.w > entity.x &&\n        nacho.y < entity.y + entity.h &&\n        nacho.h + nacho.y > entity.y) {\n        //Collision Occured\n        Physics.handleCollision(data, entity);\n      }\n    };\n\n    data.entities.wallsArray.forEach(function (wall) {\n      entityCollisionCheck(wall);\n    });\n\n    data.entities.chipsArray.forEach(function(chip){\n      entityCollisionCheck(chip);\n    });\n  },\n\n    handleCollision: function (data, entity) {\n      let nacho = data.entities.nacho;\n\n      if (entity.type === \"wall\") {\n        //Left Side Wall Collision\n        if (nacho.x < entity.x && nacho.y >= entity.y) {\n          nacho.x = entity.x - nacho.w;\n        }\n\n        //Right Side Wall Collision\n        if (nacho.x > entity.x && nacho.y >= entity.y) {\n          nacho.x = entity.x + entity.w;\n        }\n\n        //Top of Wall Collision\n        if (nacho.y < entity.y && (nacho.x + nacho.w) > entity.x + 10 &&\n          nacho.x < (entity.x + entity.w) - 10 && nacho.velY >= 0) {\n         nacho.currentState = nacho.states.standing;\n          nacho.y = entity.y - nacho.h;\n          nacho.velY = 0;\n        }\n      }\n\n      if (entity.type === \"chip\") {\n        let chipsArray = data.entities.chipsArray;\n        let chipSound = entity.sound.cloneNode();\n        let index = chipsArray.indexOf(entity);\n\n        data.entities.score.value += 1;\n\n        chipSound.play();\n        chipsArray.splice(index, 1);\n      }\n    },\n\n  helpers: {\n    gravity: function(entity){\n      // this will give us acceleration downwards\n      entity.velY += 1.2;\n      entity.y += entity.velY;\n    }\n  }\n\n};\n\nexport default Physics;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/util/physics.js\n// module id = 6\n// module chunks = 0","const Animation = {\n  update: data => {\n    nacho(data);\n    chips(data);\n  },\n};\n\nconst nacho = data => {\n  data.entities.nacho.currentState.animation(data);\n};\n\nconst chips = data => {\n  data.entities.chipsArray.forEach((chip)=>{\n    chip.currentState.animation(data);\n  });\n};\n\nexport default Animation;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/util/animation.js\n// module id = 7\n// module chunks = 0","import Chip from \"./chip\";\n// import Corn from \"./corn\";\nimport Nacho from \"./nacho\";\nimport Wall from \"./walls\";\nimport Background from \"./background\";\nimport Score from \"./score\";\nimport Sprite from './sprite';\n\n// this class contains and initializes ALL of the entities for the game.\nconst Entities = {\n\n  init(data){\n\n    let bgSprite = new Sprite(data.tileSet, 72, 288, 432, 324);\n    let background = new Background(\"bg\", bgSprite, 0, 0, 768, 600);\n\n    let nacho = new Nacho(\"nacho\", data.spriteSheet, 40, 10, 64, 64);\n\n    let wallLocations = [[0, 0, 4, 600], [0, 500, 768, 150],\n                      [225, 365, 336, 216], [767, 0, 4, 600]];\n\n    let score = Score(290, 70);\n\n    let chipLocations = [[269, 120], [317, 120], [365, 120], [413, 120], [461, 120],\n                             [221, 210], [269, 210], [317, 210], [365, 210], [413, 210], [461, 210], [509, 210],\n                             [221, 300], [269, 300], [317, 300], [365, 300], [413, 300], [461, 300], [509, 300]];\n\n    data.entities.background = background;\n    data.entities.nacho = nacho;\n    data.entities.chipsArray = [];\n    data.entities.wallsArray = [];\n     data.entities.score = score;\n\n  // loop through locations to create a new coin for each location element\n    chipLocations.forEach(function (location) {\n      data.entities.chipsArray.push(new Chip(\"chip\", data.spriteSheet, location[0], location[1], 30, 42));\n    });\n\n    wallLocations.forEach(function (location) {\n      data.entities.wallsArray.push(Wall(location[0], location[1], location[2], location[3]));\n    });\n  }\n};\n\nexport default Entities;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/entities/entities.js\n// module id = 8\n// module chunks = 0","import Entity from './entity';\nimport Sprite from './sprite';\n\nexport default class Chip extends Entity{\n  constructor(type, spritesheet, x, y, w, h){\n\n    let sprite =  new Sprite(spritesheet, 172, 22, 31, 23);\n\n    super(type, sprite, x, y, w, h);\n\n    this.sound = new Audio(\"audio/supernacho_chip.mp3\");\n\n    this.spriteAnimations = {\n      spin: {\n        frames: [new Sprite(spritesheet, 140, 22, 31, 23),\n                new Sprite(spritesheet, 172, 22, 31, 23),\n                new Sprite(spritesheet, 204, 22, 31, 23),\n                ],\n        currentFrame: 0\n      }\n    };\n\n    let self = this;\n\n    this.states = {\n      spinning: {\n        animation: data => {\n          if (data.animationFrame % 13 === 0) {\n            // console.log(\"self: \", self);\n            self.sprite = self.spriteAnimations.spin.frames[self.spriteAnimations.spin.currentFrame];\n            self.spriteAnimations.spin.currentFrame++;\n\n            if (self.spriteAnimations.spin.currentFrame > 2) {\n              self.spriteAnimations.spin.currentFrame = 0;\n            }\n          }\n        }\n      }\n    };\n    this.currentState = self.states.spinning;\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/entities/chip.js\n// module id = 9\n// module chunks = 0","import Entity from './entity';\nimport Sprite from './sprite';\n\nexport default class Nacho extends Entity {\n\n  constructor(type, spritesheet, x, y, w, h){\n\n    let sprite = new Sprite(spritesheet, 0, 0, 24, 24);\n\n    super(type, sprite, x, y, w, h);\n\n    this.jumpSound = new Audio(\"audio/supernacho_jump.mp3\");\n\n    this.spriteAnimations = {\n      walkRight: {\n        frames: [new Sprite(spritesheet, 24, 0, 24, 24),\n                new Sprite(spritesheet, 48, 0, 24, 24),\n                new Sprite(spritesheet, 72, 0, 24, 24)],\n        currentFrame: 0\n      },\n      walkLeft: {\n          frames: [new Sprite(spritesheet, 51, 26, 24, 24),\n                  new Sprite(spritesheet, 26, 25, 24, 24),\n                  new Sprite(spritesheet, 0, 26, 24, 24)],\n          currentFrame: 0\n      },\n      standRight: new Sprite(spritesheet, 0, 0, 24, 24),\n      standLeft: new Sprite(spritesheet, 75, 27, 24, 24),\n      jumpLeft: new Sprite(spritesheet, 99, 25, 24, 24),\n      jumpRight: new Sprite(spritesheet, 98, 0, 28, 24)\n    };\n    let self = this;\n    this.states = {\n      // clone node -- so that if we press it multiple times before the sound is finished, it will still create a new sound\n      jumping: {\n        movement: data => {\n          if (this.velY === 0) {\n            var jumpSound = this.jumpSound.cloneNode();\n            jumpSound.volume = 0.3;\n            jumpSound.play();\n            this.velY -= 23;\n          }\n        },\n        animation: data => {\n          if (this.direction === \"right\") {\n            this.sprite = self.spriteAnimations.jumpRight;\n          } else {\n            this.sprite = self.spriteAnimations.jumpLeft;\n          }\n        }\n      },\n      standing: {\n        movement: data => {\n          return;\n        },\n        animation: function(data){\n          if (this.direction === \"right\") {\n            this.sprite = self.spriteAnimations.standRight;\n          } else {\n            this.sprite = self.spriteAnimations.standLeft;\n          }\n        }\n      },\n      walking: {\n        movement: data => {\n          if (this.direction === \"right\") {\n            this.x += this.velX;\n          } else {\n            this.x -= this.velX;\n          }\n        },\n        animation: data => {\n          if (this.direction === \"right\") {\n            if (data.animationFrame % 5 === 0) {\n              this.sprite = self.spriteAnimations.walkRight.frames[self.spriteAnimations.walkRight.currentFrame];\n              self.spriteAnimations.walkRight.currentFrame++;\n\n              if (self.spriteAnimations.walkRight.currentFrame > 2) {\n                self.spriteAnimations.walkRight.currentFrame = 0;\n              }\n            }\n          } else {\n            if (data.animationFrame % 5 === 0) {\n              this.sprite = self.spriteAnimations.walkLeft.frames[self.spriteAnimations.walkLeft.currentFrame];\n              self.spriteAnimations.walkLeft.currentFrame++;\n\n              if (self.spriteAnimations.walkLeft.currentFrame > 2) {\n                self.spriteAnimations.walkLeft.currentFrame = 0;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    this.currentState = this.states.standing;\n    this.direction = \"right\";\n    this.velY = 0;\n    this.velX = 3.8;\n    this.chips = 0;\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/entities/nacho.js\n// module id = 10\n// module chunks = 0","const Wall = (x, y, w, h) => ({\n    type: \"wall\",\n    x,\n    y,\n    w,\n    h\n});\n\nexport default Wall;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/entities/walls.js\n// module id = 11\n// module chunks = 0","import Entity from './entity';\n\nexport default class Background extends Entity{\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/entities/background.js\n// module id = 12\n// module chunks = 0","const Score = (x, y) => ({\n  value: 0,\n  size: \"25px\",\n  font: \"PixelEmulator\",\n  color: \"white\",\n  x,\n  y\n});\n\nexport default Score;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/entities/score.js\n// module id = 13\n// module chunks = 0","\nclass Map{\n  constructor(level, tiles, sprites){\n    this.level = level;\n    this.tiles = tiles;\n    this.sprites = sprites;\n  }\n}\n\nexport default Map;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/map/map_creator.js\n// module id = 14\n// module chunks = 0"],"sourceRoot":""}